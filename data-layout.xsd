<?xml version="1.0" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns="http://doc.mabron.de/xsd/data-layout/2020-06/data-layout.xsd"
    elementFormDefault="qualified"
    targetNamespace="http://doc.mabron.de/xsd/data-layout/2020-06/data-layout.xsd"
   >
    <xs:element name="DataDefinition">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="Environment" type="Environment" minOccurs="0" maxOccurs="1" />
                <xs:element name="Extensions" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>
                            Add external files that will extend the current specification. 
                            The external files can inherit from type definitions that are
                            defined in the current file.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="Extensions" minOccurs="0" maxOccurs="unbounded" />
                    </xs:complexType>
                </xs:element>
                <xs:element name="DefaultTypeSecurity" minOccurs="0" maxOccurs="1" type="TypeSecurity" />
                <xs:element name="Types" type="Types" minOccurs="0" maxOccurs="1">
                    <xs:unique name="typeName">
                        <xs:selector xpath="Type" />
                        <xs:field xpath="@name" />
                    </xs:unique>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="Environment">
        <xs:sequence>
            <xs:element name="EnvVars" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Attribute" type="Attribute" minOccurs="0" maxOccurs="unbounded" />
                    </xs:sequence>
                </xs:complexType>
                <xs:unique name="envVarName">
                    <xs:selector xpath="Attribute" />
                    <xs:field xpath="@name" />
                </xs:unique>
            </xs:element>
            <xs:element name="Build" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="CSharp" minOccurs="0" maxOccurs="1">
                            <xs:complexType>
                                <xs:attribute name="supported" type="xs:boolean" default="true" />
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="PHP" minOccurs="0" maxOccurs="1">
                            <xs:complexType>
                                <xs:attribute name="supported" type="xs:boolean" default="true" />
                                <xs:attribute name="dbEngine" default="sql-mabron-db-connector">
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:enumeration value="sql-mabron-db-connector" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="dbPrefix" default="">
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:pattern value="[a-zA-Z0-9_]*" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="classNamespace" default="">
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:pattern value="([A-Z][a-zA-Z0-9_]*(\\[A-Z][a-zA-Z0-9_]*)*)?" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="publicMemberAccess" type="xs:boolean" default="false" />
                                <xs:attribute name="maxDbTableNameLength" default="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            If this value is not 0 every type name will trimmed and suffixed
                                            with its index to fit the space requirements. The prefix in dbPrefix
                                            will be ignored in calculation.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="xs:unsignedInt">
                                            <xs:pattern value="0|[3-9]|[1-9][0-9]+" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="fullQuery" default="auto">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This will overwrite the behaviour of the types. 
                                            If activated for each request all possible column 
                                            values will be queried and the highest possible
                                            type will be used. This could make the code and
                                            execution time larger.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:enumeration value="none" />
                                            <xs:enumeration value="auto" />
                                            <xs:enumeration value="all" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="PHP-GraphQL" minOccurs="0" maxOccurs="1">
                            <xs:complexType>
                                <xs:attribute name="supported" type="xs:boolean" default="true" />
                                <xs:attribute name="dbClassNamespace" default="">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The namespace of all db php classes.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:pattern value="([A-Z][a-zA-Z0-9_]*(\\[A-Z][a-zA-Z0-9_]*)*)?" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="classNamespace" default="">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The namespace of all helper php classes.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:pattern value="([A-Z][a-zA-Z0-9_]*(\\[A-Z][a-zA-Z0-9_]*)*)?" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="classPrefix" default="">
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:pattern value="[a-zA-Z0-9_]*" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="standalone" type="xs:boolean" default="false">
                                    <xs:annotation>
                                        <xs:documentation>
                                            In a standalone build the type resolver will directly
                                            linked to the graphql schema and the code for the 
                                            complete routine will be created. In a standalone
                                            configuration it is pretty deficult to extend something.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="internalPermissionChecks" type="xs:boolean" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            With this option activated an empty class will be
                                            created that can be filled with code from the outside. 
                                            The member of this class will be called if any type
                                            will be accessed. This class will determine if the user
                                            is allowed to access it. Otherwise permission checks has
                                            to be done outside of the db scope.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="classLoaderType" default="">
                                    <xs:annotation>
                                        <xs:documentation>
                                            If this value is not empty a GraphQl will created with
                                            a direct access to the classes. These will use UID access
                                            to provide content.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:pattern value="[a-zA-Z0-9_]*" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="pagination" default="exceptQuery">
                                    <xs:annotation>
                                        <xs:documentation>
                                            This will create a complete pagination for an array output.
                                            'types' will create only for the direct type loader, 'exceptQuery' 
                                            only for any autogenerated functions (without user querys), 'full' 
                                            will add a pagination to every method with array output. 
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:enumeration value="none" />
                                            <xs:enumeration value="types" />
                                            <xs:enumeration value="exceptQuery" />
                                            <xs:enumeration value="full" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="separateMutation" type="xs:boolean" default="true">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Decides if the mutation context will be created separate. If false 
                                            all the mutation methods will be also executable as querys.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="Elm" minOccurs="0" maxOccurs="1">
                            <xs:complexType>
                                <xs:attribute name="supported" type="xs:boolean" default="true" />
                                <xs:attribute name="namespace" default="Data">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The elm namespace of the result module.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:pattern value="([A-Z][a-zA-Z0-9_]*(\.[A-Z][a-zA-Z0-9_]*)*)?" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="profile" use="optional" type="keyType" default="default" />
                    <xs:attribute name="security" use="optional" default="include">
                        <xs:annotation>
                            <xs:documentation>
                                This will define the default behaviour of the security nodes.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="include" />
                                <xs:enumeration value="exclude" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:group name="Extensions">
        <xs:sequence>
            <xs:element name="Extension">
                <xs:complexType>
                    <xs:attribute name="file" type="xs:string" use="required" />
                    <xs:attribute name="prefix" type="keyType" use="optional" />
                    <xs:attribute name="use" use="optional" default="required">
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="required" />
                                <xs:enumeration value="optional" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="environment" use="optional" default="ignore">
                        <xs:annotation>
                            <xs:documentation>
                                Define how the environment variables should be handled.

                                ignore: this will discard the environment variables
                                from the extension. Any used variable has to be 
                                defined in the current scope. 

                                addPrefix: it will add a prefix to the environment
                                variables. Any undefined environment variables in
                                the extension has to be added in the current scope.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="ignore">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The environment variables that are defined in 
                                            the extension are discarded and ignored. It 
                                            will use the variables from the current scope.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="addPrefix">
                                    <xs:annotation>
                                        <xs:documentation>
                                            The environment variables that are defined in
                                            the extension get the same prefix as the types. 
                                            If a undefined variable is used these have to be
                                            defined in the current scope.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="Types">
        <xs:sequence>
            <xs:element name="Type" minOccurs="0" maxOccurs="unbounded" type="typeDef">
                <xs:key name="attrKey">
                    <xs:selector xpath="./Attributes/Attribute" />
                    <xs:field xpath="@name" />
                </xs:key>
                <xs:keyref name="attrKeyRef" refer="attrKey">
                    <xs:selector xpath="./Links/Link" />
                    <xs:field xpath="@attribute" />
                </xs:keyref>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="typeDef">
        <xs:sequence>
            <xs:element name="Security" minOccurs="0" maxOccurs="1" type="TypeSecurity" />
            <xs:element name="Attributes" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Attribute" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:complexContent>
                                    <xs:extension base="Attribute">
                                        <xs:group ref="SecurityNodeEx" minOccurs="0" maxOccurs="1" />
                                    </xs:extension>
                                </xs:complexContent>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
                <xs:unique name="typeAttrName">
                    <xs:selector xpath="Attribute"></xs:selector>
                    <xs:field xpath="@name" />
                </xs:unique>
            </xs:element>
            <xs:element name="Links" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Link" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="attribute" type="keyType" use="required" />
                                <xs:attribute name="target" type="keyType" use="required" />
                                <xs:attribute name="tarAttribute" type="keyType" use="required" />
                                <xs:attribute name="name" type="keyType" use="optional" />
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="Joints" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Joint" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:group ref="SecurityNodeEx" minOccurs="0" maxOccurs="1" />
                                <xs:attribute name="name" type="keyType" use="required" />
                                <xs:attribute name="target" type="keyType" use="required" />
                                <xs:attribute name="required" type="xs:boolean" use="optional" default="true" />
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="Access" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Query" type="Query" minOccurs="0" maxOccurs="unbounded" />
                    </xs:sequence>
                </xs:complexType>
                <xs:unique name="typeAccessName">
                    <xs:selector xpath="Query" />
                    <xs:field xpath="@name" />
                </xs:unique>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="name" type="keyType" use="required" />
        <xs:attribute name="base" type="keyType" use="optional" />
        <xs:attribute name="fullQuery" type="xs:boolean" default="false">
            <xs:annotation>
                <xs:documentation>
                    If activated it will always fetch all possible members
                    and try to return the highest type. You will always get
                    the real types of the values instead the queried type. 
                    On the other hand the code and the execution time 
                    could become larger.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="TypeSecurity">
        <xs:sequence>
            <xs:element name="Create" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:group ref="IncludePermissions" minOccurs="0" maxOccurs="unbounded" />
                </xs:complexType>
            </xs:element>
            <xs:element name="Load" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:group ref="IncludePermissions" minOccurs="0" maxOccurs="unbounded" />
                </xs:complexType>
            </xs:element>
            <xs:element name="Delete" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:group ref="IncludePermissions" minOccurs="0" maxOccurs="unbounded" />
                </xs:complexType>
            </xs:element>
            <xs:element name="DefaultAttribute" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:group ref="IncludePermissionsEx" minOccurs="0" maxOccurs="unbounded" />
                </xs:complexType>
            </xs:element>
            <xs:element name="DefaultJoint" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:group ref="IncludePermissionsEx" minOccurs="0" maxOccurs="unbounded" />
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Query">
        <xs:sequence>
            <xs:element name="Inputs" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence maxOccurs="unbounded">
                        <xs:element name="InputVar" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="name" type="keyType" use="required" />
                                <xs:attribute name="type" type="AttributeType" use="required" />
                                <xs:attribute name="array" type="xs:boolean" use="optional" default="false" />
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="InputObj" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="name" type="keyType" use="required" />
                                <xs:attribute name="target" type="keyType" use="required" />
                                <xs:attribute name="array" type="xs:boolean" use="optional" default="false" />
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
                <xs:unique name="queryInputs">
                    <xs:selector xpath="InputVar" />
                    <xs:field xpath="@name" />
                </xs:unique>
            </xs:element>
            
            <xs:element name="Bounds" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:group ref="boundBoolContent" minOccurs="1" maxOccurs="1" />
                </xs:complexType>
            </xs:element>

            <xs:element name="Sort" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Member" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                                <xs:attribute name="name" type="keyType" use="required" />
                                <xs:attribute name="order" use="optional" default="ascend">
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:enumeration value="ascend" />
                                            <xs:enumeration value="descend" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <xs:group ref="SecurityNode" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute name="name" type="keyType" use="required" />
        <xs:attribute name="use" use="optional">
            <xs:annotation>
                <xs:documentation>
                    The purpose you want to use this query
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="search">
                        <xs:annotation>
                            <xs:documentation>
                                This Query will generate a result and contains a list of all found entries.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="delete">
                        <xs:annotation>
                            <xs:documentation>
                                This Query will search for all matching entries and will delete them.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="limit" use="optional" default="all">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="all" />
                    <xs:enumeration value="first" />
                    <xs:enumeration value="input" />
                    <xs:enumeration value="env" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="limitVar" type="keyType" use="optional">
            <xs:annotation>
                <xs:documentation>
                    This attribute is only required if limit is set to 'input'
                    or 'env'. This will provide the variable name.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="cache" type="xs:boolean" default="false" use="optional" />
    </xs:complexType>

    <xs:group name="boundValueContent">
        <xs:sequence>
            <xs:choice>
                <xs:element name="Input">
                    <xs:annotation>
                        <xs:documentation xml:lang="en">
                            The value of a specified search variable
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="name" type="keyType" use="required"/>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Object">
                    <xs:annotation>
                        <xs:documentation xml:lang="en">
                            The value of a specified search object
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="name" type="keyType" use="required"/>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Target">
                    <xs:complexType>
                        <xs:attribute name="name" type="keyType" use="required" />
                    </xs:complexType>
                </xs:element>
                <xs:element name="Env">
                    <xs:complexType>
                        <xs:attribute name="name" type="keyType" use="required" />
                    </xs:complexType>
                </xs:element>
                <xs:element name="Joint">
                    <xs:complexType>
                        <xs:attribute name="name" type="keyType" use="required" />
                    </xs:complexType>
                </xs:element>
                <xs:element name="Value">
                    <xs:complexType>
                        <xs:attribute name="type" type="AttributeType" use="required" />
                        <xs:attribute name="value" type="xs:string" use="required" />
                    </xs:complexType>
                </xs:element>
                <xs:group ref="boundBoolContent" />
            </xs:choice>
        </xs:sequence>
    </xs:group>

    <xs:group name="boundBoolContent">
        <xs:sequence>
            <xs:choice>
                <xs:element name="True">
                    <xs:complexType />
                </xs:element>
                <xs:element name="False">
                    <xs:complexType />
                </xs:element>
                <xs:element name="Not">
                    <xs:complexType>
                        <xs:group ref="boundBoolContent" minOccurs="1" maxOccurs="1" />
                    </xs:complexType>
                </xs:element>
                <xs:element name="Compare">
                    <xs:complexType>
                        <xs:group ref="boundValueContent" minOccurs="2" maxOccurs="2" />
                        <xs:attribute name="type" use="required">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="=" />
                                    <xs:enumeration value="lt" />
                                    <xs:enumeration value="gt" />
                                    <xs:enumeration value="leq" />
                                    <xs:enumeration value="geq" />
                                    <xs:enumeration value="!=" />
                                    <xs:enumeration value="eq" />
                                    <xs:enumeration value="neq" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Bool">
                    <xs:complexType>
                        <xs:group ref="boundBoolContent" minOccurs="2" maxOccurs="2" />
                        <xs:attribute name="type" use="required">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="and" />
                                    <xs:enumeration value="or" />
                                    <xs:enumeration value="xor" />
                                    <xs:enumeration value="nand" />
                                    <xs:enumeration value="nor" />
                                    <xs:enumeration value="xnor" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="InSet">
                    <xs:complexType>
                        <xs:group ref="boundValueContent" minOccurs="1" maxOccurs="1" />
                        <xs:attribute name="list" use="required" type="keyType" />
                    </xs:complexType>
                </xs:element>
                <xs:element name="IsNull">
                    <xs:complexType>
                        <xs:group ref="boundValueContent" minOccurs="1" maxOccurs="1" />
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:sequence>
    </xs:group>

    <xs:group name="SecurityNode">
        <xs:sequence>
            <xs:element name="Security" maxOccurs="1">
                <xs:complexType>
                    <xs:group ref="IncludePermissions" minOccurs="0" maxOccurs="unbounded" />
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:group name="SecurityNodeEx">
        <xs:sequence>
            <xs:element name="Security" maxOccurs="1">
                <xs:complexType>
                    <xs:group ref="IncludePermissionsEx" minOccurs="0" maxOccurs="unbounded" />
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:group name="IncludePermissions">
        <xs:sequence>
            <xs:choice>
                <xs:element name="Include">
                    <xs:complexType>
                        <xs:attribute name="profile" type="keyType" use="optional" />
                        <xs:attribute name="build" use="optional" default="any">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="any" />
                                    <xs:enumeration value="php" />
                                    <xs:enumeration value="php-graphql" />
                                    <xs:enumeration value="elm" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Exclude">
                    <xs:complexType>
                        <xs:attribute name="profile" type="keyType" use="optional" />
                        <xs:attribute name="build" use="optional" default="any">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="any" />
                                    <xs:enumeration value="php" />
                                    <xs:enumeration value="php-graphql" />
                                    <xs:enumeration value="elm" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:sequence>
    </xs:group>

    <xs:group name="IncludePermissionsEx">
        <xs:sequence>
            <xs:choice>
                <xs:element name="Include">
                    <xs:complexType>
                        <xs:attribute name="profile" type="keyType" use="optional" />
                        <xs:attribute name="build" use="optional" default="any">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="any" />
                                    <xs:enumeration value="php" />
                                    <xs:enumeration value="php-graphql" />
                                    <xs:enumeration value="elm" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="access" use="optional" default="any">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="any" />
                                    <xs:enumeration value="set" />
                                    <xs:enumeration value="get" />
                                    <xs:enumeration value="create" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Exclude">
                    <xs:complexType>
                        <xs:attribute name="profile" type="keyType" use="optional" />
                        <xs:attribute name="build" use="optional" default="any">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="any" />
                                    <xs:enumeration value="php" />
                                    <xs:enumeration value="php-graphql" />
                                    <xs:enumeration value="elm" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="access" use="optional" default="any">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="any" />
                                    <xs:enumeration value="set" />
                                    <xs:enumeration value="get" />
                                    <xs:enumeration value="create" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="Attribute">
        <xs:attribute name="name" type="keyType" use="required" />
        <xs:attribute name="type" type="AttributeType" use="required" />
        <xs:attribute name="default" type="xs:string" use="optional" />
        <xs:attribute name="unique" type="xs:boolean" use="optional" />
        <xs:attribute name="optional" type="xs:boolean" use="optional" />
    </xs:complexType>

    <xs:simpleType name="AttributeType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="bool" />
            <xs:enumeration value="byte" />
            <xs:enumeration value="short" />
            <xs:enumeration value="int" />
            <xs:enumeration value="long" />
            <xs:enumeration value="sbyte" />
            <xs:enumeration value="ushort" />
            <xs:enumeration value="uint" />
            <xs:enumeration value="ulong" />
            <xs:enumeration value="float" />
            <xs:enumeration value="double" />
            <xs:enumeration value="string" />
            <xs:enumeration value="bytes" />
            <xs:enumeration value="date" />
            <xs:enumeration value="json" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="keyType">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z][0-9a-zA-Z_]*" />
        </xs:restriction>
    </xs:simpleType>

</xs:schema>
